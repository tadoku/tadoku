load("@rules_go//go:def.bzl", "go_binary", "go_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load", "oci_push")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

go_library(
    name = "content-api_lib",
    srcs = ["main.go"],
    importpath = "github.com/tadoku/tadoku/services/content-api",
    visibility = ["//visibility:private"],
    deps = [
        "//services/common/domain",
        "//services/common/middleware",
        "//services/common/storage/memory",
        "//services/content-api/domain/pagecommand",
        "//services/content-api/domain/pagequery",
        "//services/content-api/domain/postcommand",
        "//services/content-api/domain/postquery",
        "//services/content-api/http/rest",
        "//services/content-api/http/rest/openapi",
        "//services/content-api/storage/postgres",
        "@com_github_getsentry_sentry_go//:sentry-go",
        "@com_github_getsentry_sentry_go//echo",
        "@com_github_go_playground_validator_v10//:validator",
        "@com_github_jackc_pgx_v4//stdlib",
        "@com_github_kelseyhightower_envconfig//:envconfig",
        "@com_github_labstack_echo_v4//:echo",
        "@com_github_labstack_echo_v4//middleware",
    ],
)

go_binary(
    name = "content-api",
    embed = [":content-api_lib"],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "app_layer",
    srcs = [":content-api"],
)

oci_image(
    name = "image",
    # This is defined by an oci.pull() call in /MODULE.bazel
    base = "@distroless_base_linux_amd64",
    entrypoint = ["/content-api"],
    tars = [":app_layer"],
)

oci_load(
    name = "load",
    # Use the image built for the target platform
    image = ":image",
    repo_tags = ["ghcr.io/tadoku/tadoku/content-api:latest", "bazel/services/content-api:latest"],
)

oci_push(
    name = "push",
    image = ":image",
    remote_tags = ["latest"],
    repository = "ghcr.io/tadoku/tadoku/content-api",
)