openapi: 3.0.3
info:
  title: immersion-api
  license:
    name: MIT
    url: https://github.com/tadoku/tadoku/blob/main/LICENSE
  version: 2.0.0
externalDocs:
  description: Find out more about Tadoku
  url: https://tadoku.github.io/tadoku/
servers:
  - url: https://tadoku.app/api/immersion/
paths:
  /contests:
    post:
      summary: Creates a new contest
      operationId: contestCreate
      tags: [contests]
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contest"
        "400":
          description: Invalid contest
        "403":
          description: Not allowed to create this contest
    get:
      summary: Lists all the contests, paginated
      operationId: contestList
      tags: [contests]
      parameters:
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: include_deleted
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: boolean
        - name: official
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: boolean
        - name: user_id
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contests"
  /contests/create-permissions:
    get:
      summary: Check if user has permission to create a new contest
      operationId: contestCreatePermissionCheck
      tags: [contests]
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Allowed to create a contest
        "403":
          description: Not allowed to create a contest
  /contests/{id}:
    get:
      summary: Fetches a contest by id
      operationId: contestFindByID
      tags: [contests]
      parameters:
        - name: id
          in: path
          description: ID of contest to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContestView"
        "404":
          description: not found
  /contests/latest-official:
    get:
      summary: Fetches the latest official contest
      operationId: contestFindLatestOfficial
      tags: [contests]
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContestView"
        "404":
          description: not found
  /contests/{id}/registration:
    get:
      summary: Fetches a contest registration if it exists
      operationId: contestFindRegistration
      tags: [contests]
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContestRegistration"
        "404":
          description: not found
    post:
      summary: Creates or updates a registration for a contest
      operationId: contestRegistrationUpsert
      tags: [contests]
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - language_codes
              properties:
                language_codes:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: language combination is invalid
        "404":
          description: contest not found
  /contests/{id}/leaderboard:
    get:
      summary: Fetches the leaderboard for a contest
      operationId: contestFetchLeaderboard
      tags: [contests]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: language_code
          in: query
          required: false
          schema:
            type: string
        - name: activity_id
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Leaderboard"
        "404":
          description: not found
  /contests/{id}/summary:
    get:
      summary: Fetches the summary for a contest
      operationId: contestFetchSummary
      tags: [contests]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContestSummary"
        "404":
          description: not found
  /contests/{id}/logs:
    get:
      summary: Lists the logs attached to a contest
      operationId: contestListLogs
      tags: [contests]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: include_deleted
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: boolean
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: user_id
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        "404":
          description: not found
  /contests/{id}/moderation/detach/{log_id}:
    post:
      summary: Detaches a log from a contest (moderation action)
      operationId: contestModerationDetachLog
      tags: [contests]
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: log_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
              properties:
                reason:
                  type: string
                  minLength: 1
                  maxLength: 1000
      responses:
        "200":
          description: successful operation
        "401":
          description: unauthorized
        "403":
          description: forbidden (not contest admin or site admin)
        "404":
          description: contest or log not found
  /contests/{id}/profile/{user_id}/scores:
    get:
      summary: Fetches the scores of a user profile in a contest
      operationId: contestProfileFetchScores
      tags: [contests_profile]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContestProfileScores"
        "404":
          description: not found
  /contests/{id}/profile/{user_id}/activity:
    get:
      summary: Fetches the activity of a user profile in a contest
      operationId: contestProfileFetchActivity
      tags: [contests_profile]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContestProfileActivity"
        "404":
          description: not found
  /contests/ongoing-registrations:
    get:
      summary: Fetches all the ongoing contest registrations of the logged in user, always in a single page
      operationId: contestFindOngoingRegistrations
      tags: [contests]
      security:
        - cookieAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContestRegistrations"
  /contests/configuration-options:
    get:
      summary: Fetches the configuration options for a new contest
      operationId: contestGetConfigurations
      tags: [contests]
      security:
        - cookieAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContestConfigurationOptions"
  /logs:
    post:
      summary: Submits a new log
      operationId: logCreate
      tags: [logs]
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - registration_ids
                - language_code
                - activity_id
                - amount
                - unit_id
                - tags
              properties:
                registration_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                language_code:
                  type: string
                  example: zho
                activity_id:
                  format: int32
                  type: integer
                amount:
                  type: number
                  format: float
                unit_id:
                  type: string
                  format: uuid
                tags:
                  type: array
                  items:
                    type: string
                  example: ["book", "fiction"]
                description:
                  type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
        "400":
          description: invalid submission
  /logs/{id}:
    get:
      summary: Fetches a log by id
      operationId: logFindByID
      tags: [logs]
      parameters:
        - name: id
          in: path
          description: ID of log to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
        "404":
          description: not found
    delete:
      summary: Deletes a log by id
      operationId: logDeleteByID
      tags: [logs]
      parameters:
        - name: id
          in: path
          description: ID of log to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
        "403":
          description: forbidden
        "404":
          description: not found
  /logs/configuration-options:
    get:
      summary: Fetches the configuration options for a log
      operationId: logGetConfigurations
      tags: [logs]
      security:
        - cookieAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogConfigurationOptions"
  /users/{userId}/profile:
    get:
      summary: Fetches a profile of a user
      operationId: profileFindByUserID
      tags: [profile]
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          description: not found
  /users/{userId}/activity/{year}:
    get:
      summary: Fetches a activity summary of a user for a given year
      operationId: profileYearlyActivityByUserID
      tags: [profile]
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
        - name: year
          in: path
          description: year of activity to fetch
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserActivity"
        "404":
          description: not found
  /users/{userId}/scores/{year}:
    get:
      summary: Fetches the scores of a user for a given year
      operationId: profileYearlyScoresByUserID
      tags: [profile]
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
        - name: year
          in: path
          description: year of activity to fetch
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileScores"
        "404":
          description: not found
  /users/{user_id}/logs:
    get:
      summary: Lists the logs of a user
      operationId: profileListLogs
      tags: [profile]
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: include_deleted
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: boolean
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        "404":
          description: not found
  /users/{userId}/contest-registrations/{year}:
    get:
      summary: Fetches the contest registrations of a user for a given year
      description: Includes private contests for the current user and admins
      operationId: profileYearlyContestRegistrationsByUserID
      tags: [profile]
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
        - name: year
          in: path
          description: year of activity to fetch
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContestRegistrations"
  /users/{userId}/activity-split/{year}:
    get:
      summary: Fetches a activity split summary of a user for a given year
      operationId: profileYearlyActivitySplitByUserID
      tags: [profile]
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: uuid
        - name: year
          in: path
          description: year of activity to fetch
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivitySplit"
        "404":
          description: not found
  /leaderboard/yearly/{year}:
    get:
      summary: Fetches the leaderboard for a given year
      operationId: fetchLeaderboardForYear
      tags: [leaderboard]
      parameters:
        - name: year
          in: path
          required: true
          schema:
            type: integer
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: language_code
          in: query
          required: false
          schema:
            type: string
        - name: activity_id
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Leaderboard"
        "404":
          description: not found
  /leaderboard/global:
    get:
      summary: Fetches the global leaderboard
      operationId: fetchLeaderboardGlobal
      tags: [leaderboard]
      parameters:
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: language_code
          in: query
          required: false
          schema:
            type: string
        - name: activity_id
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Leaderboard"
        "404":
          description: not found
  /ping:
    get:
      summary: Checks if service is responsive
      operationId: ping
      tags: [metadata]
      responses:
        "200":
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    UserProfile:
      type: object
      required:
        - id
        - display_name
        - created_at
      properties:
        id:
          type: string
          format: uuid
        display_name:
          type: string
        created_at:
          type: string
          format: date-time
          example: 2022-12-14T19:48:00Z
    UserActivityScore:
      type: object
      required:
        - date
        - score
      properties:
        date:
          type: string
          format: date
          example: 2022-12-14
        score:
          type: number
          format: float
    UserActivity:
      type: object
      required:
        - total_updates
        - scores
      properties:
        total_updates:
          type: integer
        scores:
          type: array
          items:
            $ref: "#/components/schemas/UserActivityScore"
    ActivitySplitScore:
      type: object
      required:
        - activity_id
        - activity_name
        - score
      properties:
        activity_id:
          type: integer
        activity_name:
          type: string
        score:
          type: number
          format: float
    ActivitySplit:
      type: object
      required:
        - activities
      properties:
        activities:
          type: array
          items:
            $ref: "#/components/schemas/ActivitySplitScore"
    LogConfigurationOptions:
      allOf:
        - $ref: "#/components/schemas/Languages"
        - $ref: "#/components/schemas/Activities"
        - $ref: "#/components/schemas/Units"
        - $ref: "#/components/schemas/Tags"
    Unit:
      type: object
      required:
        - id
        - log_activity_id
        - name
        - modifier
      properties:
        id:
          type: string
          format: uuid
        log_activity_id:
          type: integer
        name:
          type: string
          example: Page
        modifier:
          type: number
          example: 3.14
        language_code:
          type: string
          example: jpa
    Units:
      type: object
      required:
        - units
      properties:
        units:
          type: array
          items:
            $ref: "#/components/schemas/Unit"
    Tag:
      type: object
      required:
        - id
        - log_activity_id
        - name
      properties:
        id:
          type: string
          format: uuid
        log_activity_id:
          type: integer
        name:
          type: string
          example: Book
    Tags:
      type: object
      required:
        - tags
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
    ContestConfigurationOptions:
      allOf:
        - $ref: "#/components/schemas/Languages"
        - $ref: "#/components/schemas/Activities"
        - type: object
          required:
            - can_create_official_round
          properties:
            can_create_official_round:
              type: boolean
    Language:
      type: object
      required:
        - code
        - name
      properties:
        code:
          type: string
          example: jpa
          description: In ISO-639-3 https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Languages/List_of_ISO_639-3_language_codes_(2019)
        name:
          type: string
          example: Japanese
    Languages:
      type: object
      required:
        - languages
      properties:
        languages:
          type: array
          items:
            $ref: "#/components/schemas/Language"
    Activity:
      type: object
      required:
        - id
        - name
      properties:
        id:
          format: int32
          type: integer
          example: 1
        name:
          type: string
          example: Reading
        default:
          type: boolean
    Activities:
      type: object
      required:
        - activities
      properties:
        activities:
          type: array
          items:
            $ref: "#/components/schemas/Activity"
    ContestBase:
      type: object
      required:
        - contest_start
        - contest_end
        - registration_end
        - title
        - private
        - official
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: 2023 Round 1
        description:
          type: string
        contest_start:
          type: string
          format: date
        contest_end:
          type: string
          format: date
        registration_end:
          type: string
          format: date
        private:
          type: boolean
        official:
          type: boolean
          example: false
        owner_user_id:
          type: string
          format: uuid
        owner_user_display_name:
          type: string
          example: "john"
        created_at:
          type: string
          format: date-time
          example: 2022-12-14T19:48:00Z
        updated_at:
          type: string
          format: date-time
          example: 2022-12-14T19:48:00Z
        deleted:
          type: boolean
    Contest:
      allOf:
        - $ref: "#/components/schemas/ContestBase"
        - type: object
          required:
            - language_code_allow_list
            - activity_type_id_allow_list
          properties:
            language_code_allow_list:
              type: array
              items:
                type: string
              example: ["jpa", "zho", "kor"]
            activity_type_id_allow_list:
              type: array
              items:
                type: integer
                format: int32
              example: [1, 2]
    ContestView:
      allOf:
        - $ref: "#/components/schemas/ContestBase"
        - type: object
          required:
            - allowed_languages
            - allowed_activities
          properties:
            allowed_languages:
              type: array
              items:
                $ref: "#/components/schemas/Language"
            allowed_activities:
              type: array
              items:
                $ref: "#/components/schemas/Activity"
    Contests:
      allOf:
        - $ref: "#/components/schemas/PaginatedList"
        - type: object
          required:
            - contests
          properties:
            contests:
              type: array
              maxItems: 50
              items:
                $ref: "#/components/schemas/Contest"
    ContestSummary:
      type: object
      required:
        - participant_count
        - language_count
        - total_score
      properties:
        participant_count:
          type: integer
        language_count:
          type: integer
        total_score:
          type: number
          format: float
    ContestRegistration:
      type: object
      required:
        - contest_id
        - user_id
        - user_display_name
        - languages
      properties:
        id:
          type: string
          format: uuid
        contest_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        user_display_name:
          type: string
          example: "john"
        languages:
          type: array
          items:
            $ref: "#/components/schemas/Language"
        contest:
          $ref: "#/components/schemas/ContestView"
    ContestRegistrations:
      allOf:
        - $ref: "#/components/schemas/PaginatedList"
        - type: object
          required:
            - registrations
          properties:
            registrations:
              type: array
              maxItems: 50
              items:
                $ref: "#/components/schemas/ContestRegistration"
    ContestRegistrationReference:
      type: object
      required:
        - contest_id
        - contest_end
        - registration_id
        - title
      properties:
        registration_id:
          type: string
          format: uuid
        contest_id:
          type: string
          format: uuid
        contest_end:
          type: string
          format: date
        title:
          type: string
          example: "January 2026"
    LeaderboardEntry:
      type: object
      required:
        - rank
        - user_id
        - user_display_name
        - score
        - is_tie
      properties:
        rank:
          type: integer
        user_id:
          type: string
          format: uuid
        user_display_name:
          type: string
          example: "john"
        score:
          type: number
          format: float
        is_tie:
          type: boolean
    Leaderboard:
      allOf:
        - $ref: "#/components/schemas/PaginatedList"
        - type: object
          required:
            - entries
          properties:
            entries:
              type: array
              items:
                $ref: "#/components/schemas/LeaderboardEntry"
    Score:
      type: object
      required:
        - language_code
        - score
      properties:
        language_code:
          type: string
          example: zho
        language_name:
          type: string
          example: Chinese
        score:
          type: number
          format: float
    Scores:
      type: array
      items:
        $ref: "#/components/schemas/Score"
    ProfileScores:
      type: object
      required:
        - overall_score
        - scores
      properties:
        overall_score:
          type: number
          format: float
        scores:
          $ref: "#/components/schemas/Scores"
    ContestProfileScores:
      allOf:
        - $ref: "#/components/schemas/ProfileScores"
        - type: object
          required:
            - registration
          properties:
            registration:
              $ref: "#/components/schemas/ContestRegistration"
    ContestProfileActivity:
      type: object
      required:
        - rows
      properties:
        rows:
          type: array
          items:
            $ref: "#/components/schemas/ContestProfileActivityRow"
    ContestProfileActivityRow:
      type: object
      required:
        - date
        - language_code
        - score
      properties:
        date:
          type: string
          format: date
        language_code:
          type: string
          example: zho
        score:
          type: number
          format: float
    Log:
      type: object
      required:
        - id
        - user_id
        - language
        - activity
        - unit_name
        - tags
        - amount
        - modifier
        - score
        - created_at
        - deleted
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        user_display_name:
          type: string
        description:
          type: string
        language:
          $ref: "#/components/schemas/Language"
        activity:
          $ref: "#/components/schemas/Activity"
        unit_name:
          type: string
          example: "page"
        tags:
          type: array
          items:
            type: string
          example: ["Book", "Fiction"]
        amount:
          type: number
          format: float
        modifier:
          type: number
          format: float
        score:
          type: number
          format: float
        registrations:
          type: array
          items:
            $ref: "#/components/schemas/ContestRegistrationReference"
        created_at:
          type: string
          format: date-time
        deleted:
          type: boolean
    Logs:
      allOf:
        - $ref: "#/components/schemas/PaginatedList"
        - type: object
          required:
            - logs
          properties:
            logs:
              type: array
              items:
                $ref: "#/components/schemas/Log"
    PaginatedList:
      type: object
      required:
        - next_page_token
        - total_size
      properties:
        total_size:
          type: integer
          example: 100
        next_page_token:
          type: string
          description: is empty if there's no next page
          example: "3"
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: ory_kratos_session
